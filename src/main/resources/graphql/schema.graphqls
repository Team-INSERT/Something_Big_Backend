type Query{
    readOne(id:Int):PostOutPut
    readByCategory(category: String, page: Int, size: Int): Pagination
}

type Mutation{
    create(input:PostInput):PostOutPut
    update(input:PostInput):PostOutPut
    delete(id: Int):DeleteOutPut
    updateLostFoundUser(postId: Int, foundUserId: Int): PostOutPut
}

input PostInput{
    id: ID
    title:String
    category:String
    content:String
    prUrl:String
    isFinished:Boolean
    lostThingImage:String
    place: String
    keepingPlace: String
    startTime:String
    endTime:String
    field:String
}

type PostOutPut{
    id: ID
    title:String
    category:String
    content:String
    likeCount:Int
    commentCount:Int
    createdAt: String
    doesLike:Boolean
    user: UserSimpleOutPut
    prUrl:String,
    isFinished:Boolean
    lostThingImage:String
    place: String
    keepingPlace: String
    foundUser: UserSimpleOutPut
    startTime:String
    endTime:String
    field:String
}

type Pagination{
    entity: [PostOutPut]
    totalPage: Int!
    currentPage: Int!
}

type UserSimpleOutPut{
    id: Int
    nickName: String
    profileImage: String
}

type DeleteOutPut{
    deletedId: Int
}


scalar Date
    @specifiedBy(url:"https://tools.ietf.org/html/rfc3339")

